# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qPRTDeblrBkDrkv0FPMKqypUMisXtmb4

importing the libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Loading csv file in pandas dataframe(heart.csv)"""

heart_data=pd.read_csv('/content/heart.csv')

heart_data.head()

heart_data.tail()

"""Getting number of rows and column from table """

heart_data.shape

heart_data.info()



"""Checking for missing values

"""

heart_data.isnull().sum()



"""statistical measure of data"""

heart_data.describe()



"""Checking the distribution of target variable"""

heart_data['target'].value_counts()



"""Here 1 represent defective heart
     0 represent healthy heart 
"""



"""splitting the feature and target"""

X=heart_data.drop(columns='target',axis=1)
Y=heart_data['target']

"""here X contain data without target
     Y contain only taget 
"""

print(X)

print(Y)

"""Splitting the data into training data and test data"""

X_train, X_test, Y_train,Y_test=train_test_split(X, Y, test_size=0.2, stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training our machine learning model i.e logistic regression"""

model=LogisticRegression()

"""Training the logisticRegression model with training data
 Model evaluation Accuracy score
"""

model.fit(X_train, Y_train)

"""Accuracy on Training data"""

X_train_prediction=model.predict(X_train)

training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print("Accuracy on Training data:", training_data_accuracy)

"""Accuracy on test data"""

X_test_prediction=model.predict(X_test)

test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("Accuracy on test data",test_data_accuracy)

"""Building a predictive system"""

input_data=(65,1,3,145,233,1,0,150,0,2.3,0,0,1)

input_data_as_numpy_array=np.asarray(input_data)
"""as we need to find prediction for one values so we reshape the numpy array as we are pridictiong for only one instance"""

input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)

if (prediction[0]==0):
  print('You do not have any heart disease.')
else:
  print('You have a heart disease please contact your doctor.')
"""'You have a heart disease please contact your doctor."""

